module c_libxml.chvalid;

import c_libxml.xmlstring;
import c_libxml.xmlversion;

/*
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character
 *               range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
 */

extern (C):

/*
 * Define our typedefs and structures
 *
 */
alias xmlChSRange = _xmlChSRange;
alias xmlChSRangePtr = _xmlChSRange*;

struct _xmlChSRange
{
    ushort low;
    ushort high;
}

alias xmlChLRange = _xmlChLRange;
alias xmlChLRangePtr = _xmlChLRange*;

struct _xmlChLRange
{
    uint low;
    uint high;
}

alias xmlChRangeGroup = _xmlChRangeGroup;
alias xmlChRangeGroupPtr = _xmlChRangeGroup*;

struct _xmlChRangeGroup
{
    int nbShortRange;
    int nbLongRange;
    const(xmlChSRange)* shortRange; /* points to an array of ranges */
    const(xmlChLRange)* longRange;
}

/**
 * Range checking routine
 */
int xmlCharInRange(uint val, const(xmlChRangeGroup)* group);

/**
 * xmlIsBaseChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsBaseChar_ch(T)(auto ref T c)
{
    return ((0x41 <= c) && (c <= 0x5a)) || ((0x61 <= c) && (c <= 0x7a)) || ((0xc0 <= c) && (c <= 0xd6)) || ((0xd8 <= c) && (c <= 0xf6)) || (0xf8 <= c);
}

/**
 * xmlIsBaseCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsBaseCharQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsBaseChar_ch(c) : xmlCharInRange(c, &xmlIsBaseCharGroup);
}

extern __gshared const xmlChRangeGroup xmlIsBaseCharGroup;

/**
 * xmlIsBlank_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsBlank_ch(T)(auto ref T c)
{
    return (c == 0x20) || ((0x9 <= c) && (c <= 0xa)) || (c == 0xd);
}

/**
 * xmlIsBlankQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsBlankQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsBlank_ch(c) : 0;
}

/**
 * xmlIsChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsChar_ch(T)(auto ref T c)
{
    return ((0x9 <= c) && (c <= 0xa)) || (c == 0xd) || (0x20 <= c);
}

/**
 * xmlIsCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsCharQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsChar_ch(c) : (((0x100 <= c) && (c <= 0xd7ff)) || ((0xe000 <= c) && (c <= 0xfffd)) || ((0x10000 <= c) && (c <= 0x10ffff)));
}

extern __gshared const xmlChRangeGroup xmlIsCharGroup;

/**
 * xmlIsCombiningQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsCombiningQ(T)(auto ref T c)
{
    return (c < 0x100) ? 0 : xmlCharInRange(c, &xmlIsCombiningGroup);
}

extern __gshared const xmlChRangeGroup xmlIsCombiningGroup;

/**
 * xmlIsDigit_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsDigit_ch(T)(auto ref T c)
{
    return ((0x30 <= c) && (c <= 0x39));
}

/**
 * xmlIsDigitQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsDigitQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsDigit_ch(c) : xmlCharInRange(c, &xmlIsDigitGroup);
}

extern __gshared const xmlChRangeGroup xmlIsDigitGroup;

/**
 * xmlIsExtender_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsExtender_ch(T)(auto ref T c)
{
    return (c == 0xb7);
}

/**
 * xmlIsExtenderQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsExtenderQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsExtender_ch(c) : xmlCharInRange(c, &xmlIsExtenderGroup);
}

extern __gshared const xmlChRangeGroup xmlIsExtenderGroup;

/**
 * xmlIsIdeographicQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsIdeographicQ(T)(auto ref T c)
{
    return (c < 0x100) ? 0 : (((0x4e00 <= c) && (c <= 0x9fa5)) || (c == 0x3007) || ((0x3021 <= c) && (c <= 0x3029)));
}

extern __gshared const xmlChRangeGroup xmlIsIdeographicGroup;
extern __gshared const(ubyte)[256] xmlIsPubidChar_tab;

/**
 * xmlIsPubidChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsPubidChar_ch(T)(auto ref T c)
{
    return xmlIsPubidChar_tab[c];
}

/**
 * xmlIsPubidCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
extern (D) auto xmlIsPubidCharQ(T)(auto ref T c)
{
    return (c < 0x100) ? xmlIsPubidChar_ch(c) : 0;
}

int xmlIsBaseChar(uint ch);
int xmlIsBlank(uint ch);
int xmlIsChar(uint ch);
int xmlIsCombining(uint ch);
int xmlIsDigit(uint ch);
int xmlIsExtender(uint ch);
int xmlIsIdeographic(uint ch);
int xmlIsPubidChar(uint ch);

/* __XML_CHVALID_H__ */
